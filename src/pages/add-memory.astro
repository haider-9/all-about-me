---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
---

<Layout title="Add Memory - All About Me">
  <Navbar />
  
  <main class="pt-20 min-h-screen bg-natural-gradient">
    <div class="container mx-auto px-4 py-8">
      <!-- Page Header -->
      <div class="text-center mb-8">
        <h1 class="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-700 to-slate-700 bg-clip-text text-transparent">
          Add New Memory
        </h1>
        <p class="text-gray-600 text-lg">
          Capture and preserve your special moments ‚ú®
        </p>
      </div>

      <!-- Memory Form -->
      <div class="max-w-2xl mx-auto">
        <form id="memory-form" class="glass rounded-2xl p-8 shadow-natural-lg">
          <!-- Memory Type -->
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-3">Memory Type</label>
            <div class="grid grid-cols-3 gap-3">
              <label class="memory-type-option cursor-pointer">
                <input type="radio" name="type" value="memory" class="sr-only" checked>
                <div class="memory-type-card bg-blue-50 border-2 border-blue-200 rounded-xl p-4 text-center transition-all duration-200 hover:bg-blue-100">
                  <div class="text-2xl mb-2">üí≠</div>
                  <div class="font-semibold text-blue-800">Memory</div>
                  <div class="text-xs text-blue-600">Personal moments</div>
                </div>
              </label>
              
              <label class="memory-type-option cursor-pointer">
                <input type="radio" name="type" value="milestone" class="sr-only">
                <div class="memory-type-card bg-gray-50 border-2 border-gray-200 rounded-xl p-4 text-center transition-all duration-200 hover:bg-gray-100">
                  <div class="text-2xl mb-2">üéØ</div>
                  <div class="font-semibold text-gray-700">Milestone</div>
                  <div class="text-xs text-gray-600">Important events</div>
                </div>
              </label>
              
              <label class="memory-type-option cursor-pointer">
                <input type="radio" name="type" value="achievement" class="sr-only">
                <div class="memory-type-card bg-gray-50 border-2 border-gray-200 rounded-xl p-4 text-center transition-all duration-200 hover:bg-gray-100">
                  <div class="text-2xl mb-2">üèÜ</div>
                  <div class="font-semibold text-gray-700">Achievement</div>
                  <div class="text-xs text-gray-600">Accomplishments</div>
                </div>
              </label>
            </div>
          </div>

          <!-- Title -->
          <div class="mb-6">
            <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
              Memory Title *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              maxlength="100"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              placeholder="Give your memory a meaningful title..."
            >
            <div class="text-xs text-gray-500 mt-1">
              <span id="title-count">0</span>/100 characters
            </div>
          </div>

          <!-- Date -->
          <div class="mb-6">
            <label for="date" class="block text-sm font-medium text-gray-700 mb-2">
              When did this happen? *
            </label>
            <input
              type="date"
              id="date"
              name="date"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            >
          </div>

          <!-- Description -->
          <div class="mb-6">
            <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
              Tell your story *
            </label>
            <textarea
              id="description"
              name="description"
              required
              rows="6"
              maxlength="1000"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 resize-none"
              placeholder="Describe what happened, how you felt, why it was special..."
            ></textarea>
            <div class="text-xs text-gray-500 mt-1">
              <span id="description-count">0</span>/1000 characters
            </div>
          </div>

          <!-- Image Upload -->
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Add a Photo (Optional)
            </label>
            <div class="border-2 border-dashed border-gray-300 rounded-xl p-6 text-center hover:border-blue-400 transition-colors">
              <input type="file" id="image" name="image" accept="image/*" class="hidden">
              <div id="image-upload-area" class="cursor-pointer">
                <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <p class="text-gray-600 mb-2">Click to upload an image</p>
                <p class="text-xs text-gray-500">PNG, JPG up to 5MB</p>
              </div>
              <div id="image-preview" class="hidden">
                <img id="preview-img" class="max-w-full h-48 object-cover rounded-lg mx-auto mb-2" alt="Preview">
                <button type="button" id="remove-image" class="text-red-600 hover:text-red-700 text-sm">
                  Remove Image
                </button>
              </div>
            </div>
          </div>

          <!-- Tags -->
          <div class="mb-6">
            <label for="tags" class="block text-sm font-medium text-gray-700 mb-2">
              Tags (Optional)
            </label>
            <input
              type="text"
              id="tags"
              name="tags"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
              placeholder="family, travel, birthday, graduation... (comma separated)"
            >
            <div class="text-xs text-gray-500 mt-1">
              Separate tags with commas to help organize your memories
            </div>
          </div>

          <!-- Privacy Setting -->
          <div class="mb-8">
            <label class="flex items-center cursor-pointer">
              <input type="checkbox" id="isPrivate" name="isPrivate" class="sr-only">
              <div class="privacy-toggle w-12 h-6 bg-gray-300 rounded-full relative transition-colors duration-200">
                <div class="privacy-toggle-dot w-5 h-5 bg-white rounded-full absolute top-0.5 left-0.5 transition-transform duration-200"></div>
              </div>
              <div class="ml-3">
                <div class="font-medium text-gray-700">Private Memory</div>
                <div class="text-xs text-gray-500">Only you can see this memory</div>
              </div>
            </label>
          </div>

          <!-- Submit Buttons -->
          <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
            <button
              type="submit"
              id="save-memory"
              class="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-natural hover:shadow-natural-lg"
            >
              Save Memory
            </button>
            <a
              href="/dashboard"
              class="flex-1 text-center border-2 border-gray-300 text-gray-700 py-3 px-6 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200"
            >
              Cancel
            </a>
          </div>
        </form>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Memory type selection styles */
  .memory-type-option input:checked + .memory-type-card {
    border-color: #2563eb;
    background-color: #dbeafe;
  }

  .memory-type-option input:checked + .memory-type-card.bg-blue-50 {
    border-color: #2563eb;
    background-color: #dbeafe;
  }

  .memory-type-option input:checked + .memory-type-card.bg-gray-50 {
    border-color: #2563eb;
    background-color: #dbeafe;
  }

  /* Privacy toggle styles */
  .privacy-toggle.active {
    background-color: #2563eb;
  }

  .privacy-toggle.active .privacy-toggle-dot {
    transform: translateX(1.5rem);
  }

  /* Character counter styles */
  .char-limit-warning {
    color: #f59e0b;
  }

  .char-limit-danger {
    color: #ef4444;
  }
</style>

<script>
  class AddMemoryForm {
    constructor() {
      this.form = document.getElementById('memory-form') as HTMLFormElement;
      this.setupEventListeners();
      this.setupCharacterCounters();
      this.setupImageUpload();
      this.setupPrivacyToggle();
      this.setupMemoryTypeSelection();
      this.setDefaultDate();
    }

    setupEventListeners() {
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    setupCharacterCounters() {
      const titleInput = document.getElementById('title') as HTMLInputElement;
      const descriptionInput = document.getElementById('description') as HTMLTextAreaElement;
      const titleCount = document.getElementById('title-count')!;
      const descriptionCount = document.getElementById('description-count')!;

      titleInput.addEventListener('input', () => {
        const count = titleInput.value.length;
        titleCount.textContent = count.toString();
        
        if (count > 80) {
          titleCount.className = count > 95 ? 'char-limit-danger' : 'char-limit-warning';
        } else {
          titleCount.className = '';
        }
      });

      descriptionInput.addEventListener('input', () => {
        const count = descriptionInput.value.length;
        descriptionCount.textContent = count.toString();
        
        if (count > 800) {
          descriptionCount.className = count > 950 ? 'char-limit-danger' : 'char-limit-warning';
        } else {
          descriptionCount.className = '';
        }
      });
    }

    setupImageUpload() {
      const imageInput = document.getElementById('image') as HTMLInputElement;
      const uploadArea = document.getElementById('image-upload-area')!;
      const preview = document.getElementById('image-preview')!;
      const previewImg = document.getElementById('preview-img') as HTMLImageElement;
      const removeBtn = document.getElementById('remove-image')!;

      uploadArea.addEventListener('click', () => imageInput.click());

      imageInput.addEventListener('change', (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (file) {
          if (file.size > 5 * 1024 * 1024) {
            (window as any).toast?.error('Image must be less than 5MB');
            return;
          }

          const reader = new FileReader();
          reader.onload = (e) => {
            previewImg.src = e.target?.result as string;
            uploadArea.classList.add('hidden');
            preview.classList.remove('hidden');
          };
          reader.readAsDataURL(file);
        }
      });

      removeBtn.addEventListener('click', () => {
        imageInput.value = '';
        uploadArea.classList.remove('hidden');
        preview.classList.add('hidden');
      });
    }

    setupPrivacyToggle() {
      const checkbox = document.getElementById('isPrivate') as HTMLInputElement;
      const toggle = document.querySelector('.privacy-toggle')!;

      toggle.addEventListener('click', () => {
        checkbox.checked = !checkbox.checked;
        toggle.classList.toggle('active', checkbox.checked);
      });
    }

    setupMemoryTypeSelection() {
      const typeOptions = document.querySelectorAll('.memory-type-option');
      
      typeOptions.forEach(option => {
        option.addEventListener('click', () => {
          const radio = option.querySelector('input[type="radio"]') as HTMLInputElement;
          radio.checked = true;
          
          // Update visual selection
          typeOptions.forEach(opt => {
            const card = opt.querySelector('.memory-type-card')!;
            card.classList.remove('bg-blue-50', 'border-blue-200');
            card.classList.add('bg-gray-50', 'border-gray-200');
          });
          
          const selectedCard = option.querySelector('.memory-type-card')!;
          selectedCard.classList.remove('bg-gray-50', 'border-gray-200');
          selectedCard.classList.add('bg-blue-50', 'border-blue-200');
        });
      });
    }

    setDefaultDate() {
      const dateInput = document.getElementById('date') as HTMLInputElement;
      const today = new Date().toISOString().split('T')[0];
      dateInput.value = today;
    }

    async handleSubmit(e: Event) {
      e.preventDefault();
      
      const token = localStorage.getItem('session');
      if (!token) {
        (window as any).toast?.error('Please sign in to add memories');
        window.location.href = '/';
        return;
      }

      const formData = new FormData(this.form);
      
      // Validate required fields
      const title = formData.get('title') as string;
      const description = formData.get('description') as string;
      const date = formData.get('date') as string;

      if (!title.trim() || !description.trim() || !date) {
        (window as any).toast?.error('Please fill in all required fields');
        return;
      }

      const savePromise = fetch('/api/memories', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      }).then(async (response) => {
        const result = await response.json();
        
        if (response.ok) {
          // Redirect to dashboard after successful save
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 1500);
          return result;
        } else {
          throw new Error(result.error || 'Failed to save memory');
        }
      });

      (window as any).toast?.promise(savePromise, {
        loading: 'Saving your memory...',
        success: 'Memory saved successfully! Redirecting...',
        error: 'Failed to save memory. Please try again.'
      });
    }
  }

  // Initialize form when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new AddMemoryForm();
    });
  } else {
    new AddMemoryForm();
  }
</script>
</Layout>
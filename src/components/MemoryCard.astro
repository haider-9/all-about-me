---
// Modern memory card component with enhanced animations
interface Props {
  title: string;
  date: string;
  description: string;
  image?: string;
  quote?: string;
  tags?: string[];
  type?: "memory" | "milestone" | "achievement";
  index?: number;
}

const {
  title,
  date,
  description,
  image,
  quote,
  tags = [],
  type = "memory",
  index = 0,
} = Astro.props;

const typeEmojis = {
  memory: "üí≠",
  milestone: "üéØ",
  achievement: "üèÜ",
};

const typeColors = {
  memory: "from-blue-500/20 to-blue-600/20 border-blue-200",
  milestone: "from-yellow-500/20 to-yellow-600/20 border-yellow-200",
  achievement: "from-green-500/20 to-green-600/20 border-green-200",
};

const animationClass =
  index % 3 === 0
    ? "scroll-reveal-left"
    : index % 3 === 1
      ? "scroll-reveal-up"
      : "scroll-reveal-right";
---

<div
  class={`modern-memory-card ${animationClass} glass rounded-2xl p-6 shadow-natural hover:shadow-natural-lg bg-gradient-to-br ${typeColors[type]} border border-white/30`}
  data-animate
>
  {
    image && (
      <div class="image-container mb-4 overflow-hidden rounded-xl">
        <img
          src={image}
          alt={title}
          class="w-full h-48 object-cover transform hover:scale-105 transition-transform duration-300"
        />
      </div>
    )
  }

  <div class="content">
    <div class="flex items-center justify-between mb-3">
      <span
        class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white/50 backdrop-blur-sm"
      >
        {typeEmojis[type]}
        {type}
      </span>
      <div class="text-xs text-gray-500 font-handwriting">
        {date}
      </div>
    </div>

    <h3 class="title text-lg font-bold mb-2 text-gray-800 line-clamp-2">
      {title}
    </h3>

    {
      quote && (
        <blockquote class="quote font-handwriting text-base italic text-purple-700 mb-3 border-l-4 border-purple-300 pl-4 bg-purple-50/50 rounded-r-lg py-2">
          "{quote}"
        </blockquote>
      )
    }

    <p
      class="description text-gray-600 text-sm mb-3 line-clamp-3 leading-relaxed"
    >
      {description}
    </p>

    {
      tags.length > 0 && (
        <div class="tags flex flex-wrap gap-1 mt-3">
          {tags.map((tag) => (
            <span class="tag px-2 py-1 bg-white/50 text-gray-600 text-xs rounded-full backdrop-blur-sm">
              #{tag}
            </span>
          ))}
        </div>
      )
    }
  </div>
</div>

<style>
  .modern-memory-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    opacity: 0;
  }

  .modern-memory-card:hover {
    transform: translateY(-8px) scale(1.02);
  }

  .scroll-reveal-up {
    transform: translateY(60px);
  }

  .scroll-reveal-left {
    transform: translateX(-60px);
  }

  .scroll-reveal-right {
    transform: translateX(60px);
  }

  .modern-memory-card.animate-in {
    opacity: 1;
    transform: translate(0, 0);
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Enhanced intersection observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -50px 0px",
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add("animate-in");
        }, index * 100); // Stagger animations
      }
    });
  }, observerOptions);

  // Observe all memory cards
  document.querySelectorAll("[data-animate]").forEach((card) => {
    observer.observe(card);
  });
</script>

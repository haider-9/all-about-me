---
// Interactive timeline with enhanced animations
interface Props {
  memories: Array<{
    id: string;
    title: string;
    date: string;
    description: string;
    image?: string;
    type: 'milestone' | 'memory' | 'achievement';
  }>;
}

const { memories } = Astro.props;
---

<div class="interactive-timeline relative">
  <!-- Timeline Line -->
  <div class="timeline-line absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-blue-300 via-slate-300 to-sky-300 opacity-30"></div>
  <div class="timeline-progress absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-blue-600 via-slate-600 to-sky-600"></div>
  
  <!-- Timeline Items -->
  <div class="timeline-items space-y-16 py-16">
    {memories.map((memory, index) => (
      <div 
        class={`timeline-item relative ${index % 2 === 0 ? 'left-item' : 'right-item'}`}
        data-index={index}
      >
        <!-- Timeline Dot -->
        <div class="timeline-dot absolute left-1/2 transform -translate-x-1/2 w-6 h-6 rounded-full border-4 border-white shadow-lg z-10">
          <div class="dot-inner w-full h-full rounded-full"></div>
        </div>
        
        <!-- Content Card -->
        <div class={`timeline-card max-w-md ${index % 2 === 0 ? 'mr-auto pr-16' : 'ml-auto pl-16'}`}>
          <div class="card-content bg-white rounded-2xl p-6 shadow-xl border border-gray-100 transform transition-all duration-500">
            {memory.image && (
              <div class="card-image mb-4 overflow-hidden rounded-lg">
                <img 
                  src={memory.image} 
                  alt={memory.title}
                  class="w-full h-48 object-cover transition-transform duration-300"
                />
              </div>
            )}
            
            <div class="card-header mb-3">
              <div class="flex items-center justify-between mb-2">
                <span class={`type-badge px-3 py-1 rounded-full text-xs font-semibold ${
                  memory.type === 'milestone' ? 'bg-yellow-100 text-yellow-800' :
                  memory.type === 'achievement' ? 'bg-green-100 text-green-800' :
                  'bg-blue-100 text-blue-800'
                }`}>
                  {memory.type}
                </span>
                <span class="date text-sm text-gray-500 font-handwriting">{memory.date}</span>
              </div>
              <h3 class="title text-xl font-bold text-gray-800">{memory.title}</h3>
            </div>
            
            <p class="description text-gray-600 leading-relaxed">{memory.description}</p>
            
            <!-- Interactive Elements -->
            <div class="card-actions mt-4 flex space-x-2">
              <button class="action-btn like-btn p-2 rounded-full hover:bg-red-50 transition-colors group">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-red-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
              </button>
              <button class="action-btn comment-btn p-2 rounded-full hover:bg-blue-50 transition-colors group">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
              </button>
              <button class="action-btn share-btn p-2 rounded-full hover:bg-purple-50 transition-colors group">
                <svg class="w-5 h-5 text-gray-400 group-hover:text-purple-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .interactive-timeline {
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .timeline-line {
    height: 100%;
    min-height: 500px;
  }
  
  .timeline-progress {
    height: 0%;
    transition: height 0.3s ease;
  }
  
  .timeline-item {
    opacity: 0;
    transform: translateY(50px);
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .timeline-item.animate {
    opacity: 1;
    transform: translateY(0);
  }
  
  .timeline-dot .dot-inner {
    background: linear-gradient(135deg, #2563eb, #64748b);
    transform: scale(0);
    transition: transform 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }
  
  .timeline-item.animate .dot-inner {
    transform: scale(1);
  }
  
  .left-item .timeline-card {
    transform: translateX(-30px);
  }
  
  .right-item .timeline-card {
    transform: translateX(30px);
  }
  
  .timeline-item.animate .timeline-card {
    transform: translateX(0);
  }
  
  .card-content:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }
  
  .action-btn:hover {
    opacity: 0.8;
  }
  
  .action-btn:active {
    opacity: 0.6;
  }
  
  @media (max-width: 768px) {
    .timeline-item {
      margin-left: 2rem;
    }
    
    .timeline-card {
      max-width: none !important;
      margin-left: 0 !important;
      margin-right: 0 !important;
      padding-left: 2rem !important;
      padding-right: 0 !important;
    }
    
    .timeline-dot {
      left: 0 !important;
      transform: translateX(0) !important;
    }
  }
</style>

<script>
  class InteractiveTimelineController {
    private items: NodeListOf<HTMLElement>;
    private progressBar: HTMLElement | null;
    
    constructor() {
      this.items = document.querySelectorAll('.timeline-item');
      this.progressBar = document.querySelector('.timeline-progress');
      this.init();
    }
    
    init() {
      this.setupIntersectionObserver();
      this.setupScrollProgress();
      this.setupInteractions();
    }
    
    setupIntersectionObserver() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const index = parseInt(entry.target.getAttribute('data-index') || '0');
            setTimeout(() => {
              entry.target.classList.add('animate');
            }, index * 200);
          }
        });
      }, { threshold: 0.2 });
      
      this.items.forEach(item => observer.observe(item));
    }
    
    setupScrollProgress() {
      if (!this.progressBar) return;
      
      window.addEventListener('scroll', () => {
        const timeline = document.querySelector('.interactive-timeline');
        if (!timeline) return;
        
        const rect = timeline.getBoundingClientRect();
        const timelineTop = rect.top + window.scrollY;
        const timelineHeight = rect.height;
        const scrollTop = window.scrollY;
        const windowHeight = window.innerHeight;
        
        const scrollProgress = Math.max(0, Math.min(1, 
          (scrollTop + windowHeight - timelineTop) / timelineHeight
        ));
        
        this.progressBar!.style.height = `${scrollProgress * 100}%`;
      });
    }
    
    setupInteractions() {
      // Like button interactions
      document.querySelectorAll('.like-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          btn.classList.toggle('liked');
          const icon = btn.querySelector('svg');
          if (btn.classList.contains('liked')) {
            icon?.classList.add('text-red-500', 'fill-current');
            this.createHeartAnimation(btn);
          } else {
            icon?.classList.remove('text-red-500', 'fill-current');
          }
        });
      });
      
      // Share button interactions
      document.querySelectorAll('.share-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          this.showShareAnimation(btn);
        });
      });
    }
    
    createHeartAnimation(button: Element) {
      const heart = document.createElement('div');
      heart.innerHTML = '❤️';
      heart.className = 'absolute text-red-500 pointer-events-none animate-ping';
      heart.style.left = '50%';
      heart.style.top = '50%';
      heart.style.transform = 'translate(-50%, -50%)';
      
      button.appendChild(heart);
      
      setTimeout(() => {
        heart.remove();
      }, 1000);
    }
    
    showShareAnimation(button: Element) {
      button.classList.add('animate-pulse');
      setTimeout(() => {
        button.classList.remove('animate-pulse');
      }, 600);
    }
  }
  
  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new InteractiveTimelineController());
  } else {
    new InteractiveTimelineController();
  }
</script>